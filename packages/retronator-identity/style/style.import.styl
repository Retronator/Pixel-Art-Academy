@import "{retronator:artificialengines}/mirage/helpers.import"
@import "atari2600.import"
@import "cursors.import"
@import "../typography/typography.import"

pixel-text-outline(color)
  value = ()
  for x in -1 0 1
    for y in -1 0 1
      if abs(x) isnt abs(y)
        push(value, "%srem %srem 0 %s" % (x y color))
      else
        unless x is 0 and y is 0
          push(value, "%srem %srem 0 %s" % (x y rgba(color, alpha(color) * 0.4)))

  text-shadow unquote(join(',', value))

pixel-text-emboss(mainColor, topColor)
  value = ()
  for x in -1 1 0
    for y in -1 0 1
      if y is -1 and x is 0
        push(value, "%srem %srem 0 %s" % (x y topColor))
      else
        push(value, "%srem %srem 0 %s" % (x y+1 mainColor))

  text-shadow unquote(join(',', value))

pixel-image-rendering()
  image-rendering crisp-edges                 // Current nearest-neighbor standard
  image-rendering -webkit-optimize-contrast   // Alternative name for Chrome, Edge, and Opera
  image-rendering pixelated                   // Supported everywhere, but includes smooth downscaling by standard

image(url, version = random())
  url(url + '?' + version)

hyphens()
  hyphens arguments
  -webkit-hyphens arguments

user-select()
  user-select arguments
  -webkit-user-select arguments

mask()
  mask arguments
  -webkit-mask arguments

position()
  if arguments[0] is sticky
    position -webkit-sticky arguments[1..length(arguments)]

  position arguments

easeInBack()
  cubic-bezier(0.36, 0, 0.66, -0.56)

easeOutBack()
  cubic-bezier(0.34, 1.56, 0.64, 1)

easeInBackTight()
  cubic-bezier(0.1, 0, 0.5, -0.35)

easeOutBackTight()
  cubic-bezier(0.5, 1.35, 0.9, 1)
